import 'package:flutter/material.dart';
import 'package:unping_ui/unping_ui.dart';

/// Predefined Dropdown configurations matching common design patterns
class Dropdowns {
  static BaseDropdown select(
      {String? label,
      ValueChanged? onDropdownStateChanged,
      DropdownSize? size,
      DropdownState? state,
      Color? errorColor,
      String? errorMessage,
      bool isMultiSelect = false,
      bool isSearchable = true,
      required selectedValue,
      required onSelectedValueChanged,
      required options,
      bool enableKeyboardNavigation = false,
      bool sortMenuItems = false,
      TextStyle? textStyle,
      Color? dropdownColor,
      Color? containerBackgroundColor,
      Color? borderRadiusColor,
      withBorder}) {
    return BaseDropdown(
      label: label,
      state: state ?? DropdownState.normal,
      dropdownType: DropdownType.single,
      errorColor: errorColor ?? UiColors.error,
      errorMessage: errorMessage ?? 'Error',
      options: options,
      onSelectedValueChanged: onSelectedValueChanged,
      selectedValue: selectedValue,
      onDropdownStateChanged: onDropdownStateChanged,
      containerBackgroundColor: containerBackgroundColor ?? UiColors.neutral700,
      dropdownColor: dropdownColor ?? UiColors.neutral700,
      enableKeyboardNavigation: enableKeyboardNavigation,
      size: size ?? DropdownSize.md,
      borderRadiusColor: borderRadiusColor ?? UiColors.neutral300,
      withBorder: withBorder ?? true,
    );
  }

  static BaseDropdown multiSelect(
      {String? label,
      ValueChanged? onDropdownStateChanged,
      DropdownSize? size,
      DropdownState? state,
      Color? errorColor,
      String? errorMessage,
      bool isMultiSelect = true,
      bool isSearchable = true,
      required selectedValues,
      required onSelectedValueChanged,
      required options,
      bool enableKeyboardNavigation = false,
      bool sortMenuItems = false,
      TextStyle? textStyle,
      Color? dropdownColor,
      Color? containerBackgroundColor,
      Color? borderRadiusColor,
      String? selectAllText,
      String? clearAllText,
      bool? withBorder,
      EdgeInsetsGeometry? padding}) {
    return BaseDropdown(
      label: label,
      state: state ?? DropdownState.normal,
      dropdownType: DropdownType.multi,
      errorColor: errorColor ?? UiColors.error,
      errorMessage: errorMessage ?? 'Error',
      onSelectedValueChanged: onSelectedValueChanged!,
      selectedValues: selectedValues,
      onDropdownStateChanged: onDropdownStateChanged,
      containerBackgroundColor: containerBackgroundColor ?? UiColors.neutral700,
      dropdownColor: dropdownColor ?? UiColors.neutral700,
      enableKeyboardNavigation: enableKeyboardNavigation,
      textStyle: textStyle,
      isSearchable: isSearchable,
      isMultiSelect: isMultiSelect,
      padding: padding,
      options: options,
      size: size ?? DropdownSize.md,
      selectAllText: selectAllText ?? "Select All",
      clearAllText: clearAllText ?? "Clear All",
      borderRadiusColor: borderRadiusColor ?? UiColors.neutral300,
      withBorder: withBorder ?? true,
    );
  }

  static BaseDropdown combobox({
    String? label,
    ValueChanged? onDropdownStateChanged,
    DropdownSize? size,
    DropdownState? state,
    bool isMultiSelect = true,
    bool isSearchable = true,
    required onSelectedValueChanged,
    required options,
    bool enableKeyboardNavigation = false,
    bool sortMenuItems = false,
    TextStyle? textStyle, //assign later
    EdgeInsetsGeometry? padding,
    Color? dropdownColor,
    Color? containerBackgroundColor,
    Color? borderRadiusColor,
    String? errorMessage,
    bool? withBorder,
  }) {
    return BaseDropdown(
      label: label,
      dropdownType: DropdownType.comboBox,
      state: state ?? DropdownState.normal,
      onSelectedValueChanged: onSelectedValueChanged!,
      onDropdownStateChanged: onDropdownStateChanged,
      containerBackgroundColor: containerBackgroundColor ?? UiColors.neutral700,
      dropdownColor: dropdownColor ?? UiColors.neutral700,
      enableKeyboardNavigation: enableKeyboardNavigation,
      textStyle: textStyle,
      isSearchable: isSearchable,
      isMultiSelect: isMultiSelect,
      padding: padding,
      options: options,
      size: size ?? DropdownSize.md,
      borderRadiusColor: borderRadiusColor ?? UiColors.neutral300,
      errorMessage: errorMessage ?? "Error Message",
      withBorder: withBorder ?? true,
    );
  }

  static BaseDropdown menu({
    String? label,
    DropdownType? dropdownType,
    DropdownState? state,
    ValueChanged? onDropdownStateChanged,
    Color? containerBackgroundColor,
    Color? dropdownColor,
    bool? enableKeyboardNavigation,
    TextStyle? textStyle,
    Widget? leadingDropdownIcon,
    Widget? trailingDropdownIcon,
    bool? actionMenuDivider,
    List<MenuDropdownItemGroup>? actionMenuGroups,
    EdgeInsetsGeometry? padding,
    List<String>? options,
    DropdownSize? size,
    Color? borderRadiusColor,
    bool? withBorder,
    String? errorMessage,
  }) {
    return BaseDropdown(
      label: label,
      dropdownType: DropdownType.action,
      state: state ?? DropdownState.normal,
      onDropdownStateChanged: onDropdownStateChanged,
      containerBackgroundColor: containerBackgroundColor ?? UiColors.neutral700,
      dropdownColor: dropdownColor ?? UiColors.neutral700,
      enableKeyboardNavigation: enableKeyboardNavigation ?? true,
      textStyle: textStyle ?? UiTextStyles.textMdMedium,
      leadingDropdownIcon: leadingDropdownIcon,
      trailingDropdownIcon: trailingDropdownIcon,
      actionMenuDivider: actionMenuDivider ?? true,
      actionMenuGroups: actionMenuGroups ?? [],
      padding: padding,
      options: options ?? [],
      size: size ?? DropdownSize.md,
      borderRadiusColor: borderRadiusColor ?? UiColors.neutral300,
      withBorder: withBorder ?? true,
      errorMessage: errorMessage ?? 'Error',
    );
  }
}
